When would you want to use a remote repository rather than keeping all your work local?

Two common scenarios: 

1 - To show off your work for employers etc.
2 - Open source/collabrative projects.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Boils down to control.  You don't want a remote changing you files without you know what is going on... otherwise it would be an excellent way to 
produce a multitude of bugs!

Describe the differences between forks, clones, and branches. When would you sue one instead of theanother?

Fork - take a whole reposetory, and make a copy of it, under your own control.
Clone - Copying a repository from a remote location. This copy is meant to be syncronized with the remote repository. This allows collaboration etc.
Branch - A string of changes inside of the repository, representing a set of experimental changes for example.

Fork is used to take over/ or experiment with some one else's repository.
Clone is commonly used - it is rarely desired to have work done on the same computer as the central repository. Github does have it's limitations.
Branching is used for a host of reasons, including experimental branches, trying out different directions etc.

----------------------------------------------------

What is the benefit of having a copy of the last known state of the remote stored locally?

Main benifit seems to be preplanning a messy merge. You can compare the two files, and plan on how you intent to resolve the issue, before committing.
Having the local file also has be benifit of no web connection required.

------------------------------------------------------

Lesson 3 ch 25

How would you collaborate withou using Git or GitHub?  Waht would be easier, and what would be harder?

Very little would be easier - true, you don't have to deal with all of the GIT commands, but you would lose in a vast number of ways, only some
of which can be seen directly.

 - Version control - gone.  Manual version control, saving by date etc. would be pure misery. 
 - Loss of collaboration.  Only one person could touch the code at a time. (Try inforcing that!) This would be to avoid the need to merge files. (perhaps 
   a built in diff as a bandaid?)
The loss of fuctionality would make non-trivial projects MUCH harder to operate.  The size and complexity of the current code bases are a direct
result, in part, from the use of version-control software.


----------------------------------------------------

Lesson 3 Ch 31

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

For a project that is not exploring ideas, OR making changes to major sub-fuctions, only one branch is needed. But the moment you start doing non-trivial 
changes to a sub-fuction, best to branch it out, before mergeing it into a test branch. This allows the master to be in better operating condition, major 
changes are introduced only when some level of testing and integration has been done. (In theory, at least.)
