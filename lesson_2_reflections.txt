What happens when you initialize a repository? Why do you need to do it?

Initialzing a repository generates the empty metadata tracking files needed. Can't update a repository that does not exist... 
-------------------------------------------------

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is just that... a stageing area, free of all other thinges excpet what has not been commited yet. 

Repository is history, locked in place. 
Working directory is open, not locked at all. (Assuming no interfearing file permissions!)

How can you use the staging area to make sure you have one commit per logical change?

Can be done by comparing both against the working directory AND the last commit(s).

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Situations:

Experimental features in general.
Mulitple possible solutions for a given problem/bug.
Differeant feature levels.

Branches help by keeping types of changes separated. So at least in most situations, fixing/changing one thing does not commit you to to another change/fix. 
(Assuming that the commits were done often enough.)

How do the diagrams help you visualize the branch structure?

This one is hard to anwer - the picture matches the concept in my head - essentially an (potentially) infinite branching construct, with new branchs popping
off and rejoining over time.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

All changes are combined... however clashes seem inevitable...

The diagram shows two different branches... independant than merged...
